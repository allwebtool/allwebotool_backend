//ðŸ§©Don't Edit this file.âœ¨Generated in Sun Jun 30 2024 14:18:33 GMT+0100 (West Africa Standard Time)âœ¨

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from_where     String
  username       String         @unique
  email          String         @unique
  role           Int            @default(2002) //2002 - User, 1985 - Moderator, 5150 - Admin    
  hash           String
  otp_token      String?
  rtHash         RtHash[]
  status         String         @default("active")
  email_verified Boolean        @default(false)
  videos         Video[]
  notifications  Notification[]
  subscription   Subscription[]

  @@map("users")
}

model RtHash {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId Int
  rtHash String

  @@map("rthashs")
}

model Video {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int // Foreign key to User

  videoUrl     String
  audioUrl     String
  resultUrl    String?
  thumbnailUrl String?

  // Add other fields as needed

  user User @relation(fields: [userId], references: [id])

  @@map("videos")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  message   String
  url       String?
  seen      Boolean? @default(false)

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Subscription {
  id            Int                @id @default(autoincrement())
  userId        Int
  pricingPlanId Int
  startDate     DateTime           @default(now())
  endDate       DateTime?
  status        SubscriptionStatus @default(ACTIVE)
  user          User               @relation(fields: [userId], references: [id])
  pricingPlan   PricingPlan        @relation(fields: [pricingPlanId], references: [id])

  @@map("subscriptiona")
}

model PricingPlan {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  duration      Int // Duration in days
  subscriptions Subscription[]

  @@map("pricingplans")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

model PaymentPlan {
  id             String   @id @default(cuid())
  planId         Int      @unique
  name           String
  amount         Int
  interval       String
  status         String
  description    String?
  required_field Boolean  @default(false)
  perk           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

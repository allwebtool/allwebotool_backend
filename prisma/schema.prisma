datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from_where     String
  username       String         @unique
  email          String         @unique
  role           Int            @default(2002) //2002 - User, 1985 - Moderator, 5150 - Admin    
  hash           String
  otp_token      String?
  rtHash         RtHash[]
  status         String         @default("active")
  email_verified Boolean        @default(false)
  cardToken String?
  lastDigit Int?

  videos         Video[]
  notifications  Notification[]
  transactions Transaction[]

  @@map("users")
}

model RtHash {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  rtHash String

  @@map("rthashs")
}

model Video {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  status       String  @default("initiated")
  taskId       String
  videoUrl     String?
  audioUrl     String?
  resultUrl    String?
  thumbnailUrl String?

  // Add other fields as needed

  user User @relation(fields: [userId], references: [id])

  @@map("videos")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  message   String
  url       String?
  seen      Boolean? @default(false)

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  refId     String
  amount    Float    
  type      Transtype
  status    Statustype
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  points    Float   
   
  user User @relation(fields: [userId], references: [id])


  @@map("transactions")
}

enum Transtype {
  credit
  debit
}
enum Statustype {
  initiated
  failed
  successful
}